<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/controllers/PlayerCharacterController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/controllers/PlayerCharacterController.java" />
              <option name="originalContent" value="package com.horrorcore.backendv1.controllers;&#10;&#10;import com.horrorcore.backendv1.entities.PlayerCharacter;&#10;import com.horrorcore.backendv1.services.PlayerCharacterService;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;import java.util.List;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/v1/player&quot;)&#10;public class PlayerCharacterController {&#10;    private final PlayerCharacterService playerCharacterService;&#10;&#10;    public PlayerCharacterController(PlayerCharacterService playerCharacterService) {&#10;        this.playerCharacterService = playerCharacterService;&#10;    }&#10;&#10;    @GetMapping(&quot;/characters&quot;)&#10;    public ResponseEntity&lt;List&lt;PlayerCharacter&gt;&gt; getAllCharacters() {&#10;        return ResponseEntity.ok(playerCharacterService.getAllPlayerCharacters());&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.horrorcore.backendv1.controllers;&#10;&#10;import com.horrorcore.backendv1.dtos.ApiResponse;&#10;import com.horrorcore.backendv1.dtos.PlayerCharacterResponse;&#10;import com.horrorcore.backendv1.dtos.PostNewCharacterRequest;&#10;import com.horrorcore.backendv1.dtos.UpdateCharacterRequest;&#10;import com.horrorcore.backendv1.entities.PlayerCharacter;&#10;import com.horrorcore.backendv1.services.PlayerCharacterService;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/v1/player&quot;)&#10;@RequiredArgsConstructor&#10;public class PlayerCharacterController {&#10;    private final PlayerCharacterService playerCharacterService;&#10;&#10;    @GetMapping(&quot;/characters&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;List&lt;PlayerCharacterResponse&gt;&gt;&gt; getAllCharacters() {&#10;        List&lt;PlayerCharacter&gt; characters = playerCharacterService.getAllPlayerCharacters();&#10;        List&lt;PlayerCharacterResponse&gt; response = characters.stream()&#10;                .map(PlayerCharacterResponse::from)&#10;                .collect(Collectors.toList());&#10;&#10;        return ResponseEntity.ok(ApiResponse.success(response));&#10;    }&#10;&#10;    @GetMapping(&quot;/characters/{id}&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PlayerCharacterResponse&gt;&gt; getCharacterById(@PathVariable String id) {&#10;        PlayerCharacter character = playerCharacterService.getPlayerCharacterById(id);&#10;        PlayerCharacterResponse response = PlayerCharacterResponse.from(character);&#10;&#10;        return ResponseEntity.ok(ApiResponse.success(response));&#10;    }&#10;&#10;    @PostMapping(&quot;/characters&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PlayerCharacterResponse&gt;&gt; createCharacter(&#10;            @Valid @RequestBody PostNewCharacterRequest request) {&#10;        PlayerCharacter character = playerCharacterService.createPlayerCharacter(request);&#10;        PlayerCharacterResponse response = PlayerCharacterResponse.from(character);&#10;&#10;        return ResponseEntity&#10;                .status(HttpStatus.CREATED)&#10;                .body(ApiResponse.success(&quot;Character created successfully&quot;, response));&#10;    }&#10;&#10;    @PutMapping(&quot;/characters/{id}&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;PlayerCharacterResponse&gt;&gt; updateCharacter(&#10;            @PathVariable String id,&#10;            @Valid @RequestBody UpdateCharacterRequest request) {&#10;        PlayerCharacter character = playerCharacterService.updatePlayerCharacter(id, request);&#10;        PlayerCharacterResponse response = PlayerCharacterResponse.from(character);&#10;&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Character updated successfully&quot;, response));&#10;    }&#10;&#10;    @DeleteMapping(&quot;/characters/{id}&quot;)&#10;    public ResponseEntity&lt;ApiResponse&lt;Void&gt;&gt; deleteCharacter(@PathVariable String id) {&#10;        playerCharacterService.deletePlayerCharacter(id);&#10;&#10;        return ResponseEntity.ok(ApiResponse.success(&quot;Character deleted successfully&quot;, null));&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/dtos/ApiResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/dtos/ApiResponse.java" />
              <option name="updatedContent" value="package com.horrorcore.backendv1.dtos;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;public record ApiResponse&lt;T&gt;(&#10;        boolean success,&#10;        String message,&#10;        T data,&#10;        LocalDateTime timestamp&#10;) {&#10;    public static &lt;T&gt; ApiResponse&lt;T&gt; success(T data) {&#10;        return new ApiResponse&lt;&gt;(true, &quot;Operation successful&quot;, data, LocalDateTime.now());&#10;    }&#10;&#10;    public static &lt;T&gt; ApiResponse&lt;T&gt; success(String message, T data) {&#10;        return new ApiResponse&lt;&gt;(true, message, data, LocalDateTime.now());&#10;    }&#10;&#10;    public static &lt;T&gt; ApiResponse&lt;T&gt; error(String message) {&#10;        return new ApiResponse&lt;&gt;(false, message, null, LocalDateTime.now());&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/dtos/ErrorResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/dtos/ErrorResponse.java" />
              <option name="updatedContent" value="package com.horrorcore.backendv1.dtos;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;public record ErrorResponse(&#10;        int status,&#10;        String error,&#10;        String message,&#10;        List&lt;String&gt; details,&#10;        String path,&#10;        LocalDateTime timestamp&#10;) {&#10;    public ErrorResponse(int status, String error, String message, String path) {&#10;        this(status, error, message, null, path, LocalDateTime.now());&#10;    }&#10;&#10;    public ErrorResponse(int status, String error, String message, List&lt;String&gt; details, String path) {&#10;        this(status, error, message, details, path, LocalDateTime.now());&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/dtos/PlayerCharacterResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/dtos/PlayerCharacterResponse.java" />
              <option name="updatedContent" value="package com.horrorcore.backendv1.dtos;&#10;&#10;import com.horrorcore.backendv1.entities.PlayerCharacter;&#10;import com.horrorcore.backendv1.entities.enums.PlayerClass;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;public record PlayerCharacterResponse(&#10;        String id,&#10;        String name,&#10;        PlayerClass playerClass,&#10;        int level,&#10;        int experience,&#10;        int health,&#10;        int mana,&#10;        int strength,&#10;        int agility,&#10;        int intelligence,&#10;        int stamina,&#10;        int spirit,&#10;        LocalDateTime createdAt,&#10;        LocalDateTime updatedAt&#10;) {&#10;    public static PlayerCharacterResponse from(PlayerCharacter character) {&#10;        return new PlayerCharacterResponse(&#10;                character.getId(),&#10;                character.getName(),&#10;                character.getPlayerClass(),&#10;                character.getLevel(),&#10;                character.getExperience(),&#10;                character.getHealth(),&#10;                character.getMana(),&#10;                character.getStrength(),&#10;                character.getAgility(),&#10;                character.getIntelligence(),&#10;                character.getStamina(),&#10;                character.getSpirit(),&#10;                character.getCreatedAt(),&#10;                character.getUpdatedAt()&#10;        );&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/dtos/PostNewCharacterRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/dtos/PostNewCharacterRequest.java" />
              <option name="originalContent" value="package com.horrorcore.backendv1.dtos;&#10;&#10;public record PostNewCharacterRequest(&#10;        String name,&#10;        String playerClass&#10;) {&#10;}&#10;" />
              <option name="updatedContent" value="package com.horrorcore.backendv1.dtos;&#13;&#10;&#13;&#10;import jakarta.validation.constraints.NotBlank;&#13;&#10;import jakarta.validation.constraints.Pattern;&#13;&#10;import jakarta.validation.constraints.Size;&#13;&#10;&#13;&#10;public record PostNewCharacterRequest(&#13;&#10;        @NotBlank(message = &quot;Character name is required&quot;)&#13;&#10;        @Size(min = 3, max = 150, message = &quot;Name must be between 3 and 150 characters&quot;)&#13;&#10;        String name,&#13;&#10;&#13;&#10;        @NotBlank(message = &quot;Player class is required&quot;)&#13;&#10;        @Pattern(regexp = &quot;WARRIOR|MAGE|ROGUE|CLERIC|RANGER|INVENTOR|ALCHEMIST|BARD|INQUISITOR&quot;,&#13;&#10;                message = &quot;Invalid player class. Must be one of: WARRIOR, MAGE, ROGUE, CLERIC, RANGER, INVENTOR, ALCHEMIST, BARD, INQUISITOR&quot;)&#13;&#10;        String playerClass&#13;&#10;) {&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/dtos/UpdateCharacterRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/dtos/UpdateCharacterRequest.java" />
              <option name="originalContent" value="package com.horrorcore.backendv1.dtos;&#10;&#10;public record UpdateCharacterRequest(&#10;        String name,&#10;        String playerClass,&#10;        int level,&#10;        int experiencePoints,&#10;        int healthPoints,&#10;        int manaPoints,&#10;        int strength,&#10;        int agility,&#10;        int intelligence,&#10;        int stamina,&#10;        int spirit&#10;) {&#10;}&#10;" />
              <option name="updatedContent" value="package com.horrorcore.backendv1.dtos;&#13;&#10;&#13;&#10;import jakarta.validation.constraints.*;&#13;&#10;&#13;&#10;public record UpdateCharacterRequest(&#13;&#10;        @NotBlank(message = &quot;Character name is required&quot;)&#13;&#10;        @Size(min = 3, max = 150, message = &quot;Name must be between 3 and 150 characters&quot;)&#13;&#10;        String name,&#13;&#10;        &#13;&#10;        @NotBlank(message = &quot;Player class is required&quot;)&#13;&#10;        @Pattern(regexp = &quot;WARRIOR|MAGE|ROGUE|CLERIC|RANGER|INVENTOR|ALCHEMIST|BARD|INQUISITOR&quot;,&#13;&#10;                message = &quot;Invalid player class&quot;)&#13;&#10;        String playerClass,&#13;&#10;        &#13;&#10;        @Min(value = 1, message = &quot;Level must be at least 1&quot;)&#13;&#10;        @Max(value = 100, message = &quot;Level cannot exceed 100&quot;)&#13;&#10;        int level,&#13;&#10;        &#13;&#10;        @Min(value = 0, message = &quot;Experience points cannot be negative&quot;)&#13;&#10;        int experiencePoints,&#13;&#10;        &#13;&#10;        @Min(value = 1, message = &quot;Health points must be at least 1&quot;)&#13;&#10;        int healthPoints,&#13;&#10;        &#13;&#10;        @Min(value = 0, message = &quot;Mana points cannot be negative&quot;)&#13;&#10;        int manaPoints,&#13;&#10;        &#13;&#10;        @Min(value = 1, message = &quot;Strength must be at least 1&quot;)&#13;&#10;        int strength,&#13;&#10;        &#13;&#10;        @Min(value = 1, message = &quot;Agility must be at least 1&quot;)&#13;&#10;        int agility,&#13;&#10;        &#13;&#10;        @Min(value = 1, message = &quot;Intelligence must be at least 1&quot;)&#13;&#10;        int intelligence,&#13;&#10;        &#13;&#10;        @Min(value = 1, message = &quot;Stamina must be at least 1&quot;)&#13;&#10;        int stamina,&#13;&#10;        &#13;&#10;        @Min(value = 1, message = &quot;Spirit must be at least 1&quot;)&#13;&#10;        int spirit&#13;&#10;) {&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/exceptions/CombatException.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/exceptions/CombatException.java" />
              <option name="updatedContent" value="package com.horrorcore.backendv1.exceptions;&#10;&#10;public class CombatException extends RuntimeException {&#10;    public CombatException(String message) {&#10;        super(message);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/exceptions/GlobalExceptionHandler.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/exceptions/GlobalExceptionHandler.java" />
              <option name="originalContent" value="import org.springframework.web.bind.MethodArgumentNotValidException;&#10;import org.springframework.web.bind.annotation.ExceptionHandler;&#10;public class ResourceNotFoundException extends RuntimeException {&#10;    public ResourceNotFoundException(String message) {&#10;        super(message);&#10;                &quot;Request body is malformed or missing required fields&quot;,&#10;                request.getRequestURI()&#10;    public ResourceNotFoundException(String resourceName, String fieldName, Object fieldValue) {&#10;        super(String.format(&quot;%s not found with %s: '%s'&quot;, resourceName, fieldName, fieldValue));&#10;&#10;}&#10;                request.getRequestURI()&#10;" />
              <option name="updatedContent" value="package com.horrorcore.backendv1.exceptions;&#10;&#10;import com.horrorcore.backendv1.dtos.ErrorResponse;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.validation.ConstraintViolation;&#10;import jakarta.validation.ConstraintViolationException;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.http.converter.HttpMessageNotReadableException;&#10;import org.springframework.validation.FieldError;&#10;import org.springframework.web.bind.MethodArgumentNotValidException;&#10;import org.springframework.web.bind.annotation.ExceptionHandler;&#10;import org.springframework.web.bind.annotation.RestControllerAdvice;&#10;import org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@Slf4j&#10;@RestControllerAdvice&#10;public class GlobalExceptionHandler {&#10;&#10;    @ExceptionHandler(PlayerCharacterNotFoundException.class)&#10;    public ResponseEntity&lt;ErrorResponse&gt; handlePlayerCharacterNotFound(&#10;            PlayerCharacterNotFoundException ex,&#10;            HttpServletRequest request) {&#10;        log.error(&quot;Player character not found: {}&quot;, ex.getMessage());&#10;&#10;        ErrorResponse error = new ErrorResponse(&#10;                HttpStatus.NOT_FOUND.value(),&#10;                &quot;Not Found&quot;,&#10;                ex.getMessage(),&#10;                request.getRequestURI()&#10;        );&#10;&#10;        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(error);&#10;    }&#10;&#10;    @ExceptionHandler(ResourceNotFoundException.class)&#10;    public ResponseEntity&lt;ErrorResponse&gt; handleResourceNotFound(&#10;            ResourceNotFoundException ex,&#10;            HttpServletRequest request) {&#10;        log.error(&quot;Resource not found: {}&quot;, ex.getMessage());&#10;&#10;        ErrorResponse error = new ErrorResponse(&#10;                HttpStatus.NOT_FOUND.value(),&#10;                &quot;Not Found&quot;,&#10;                ex.getMessage(),&#10;                request.getRequestURI()&#10;        );&#10;&#10;        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(error);&#10;    }&#10;&#10;    @ExceptionHandler(InvalidRequestException.class)&#10;    public ResponseEntity&lt;ErrorResponse&gt; handleInvalidRequest(&#10;            InvalidRequestException ex,&#10;            HttpServletRequest request) {&#10;        log.error(&quot;Invalid request: {}&quot;, ex.getMessage());&#10;&#10;        ErrorResponse error = new ErrorResponse(&#10;                HttpStatus.BAD_REQUEST.value(),&#10;                &quot;Bad Request&quot;,&#10;                ex.getMessage(),&#10;                request.getRequestURI()&#10;        );&#10;&#10;        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(error);&#10;    }&#10;&#10;    @ExceptionHandler(CombatException.class)&#10;    public ResponseEntity&lt;ErrorResponse&gt; handleCombatException(&#10;            CombatException ex,&#10;            HttpServletRequest request) {&#10;        log.error(&quot;Combat error: {}&quot;, ex.getMessage());&#10;&#10;        ErrorResponse error = new ErrorResponse(&#10;                HttpStatus.CONFLICT.value(),&#10;                &quot;Combat Error&quot;,&#10;                ex.getMessage(),&#10;                request.getRequestURI()&#10;        );&#10;&#10;        return ResponseEntity.status(HttpStatus.CONFLICT).body(error);&#10;    }&#10;&#10;    @ExceptionHandler(IllegalArgumentException.class)&#10;    public ResponseEntity&lt;ErrorResponse&gt; handleIllegalArgument(&#10;            IllegalArgumentException ex,&#10;            HttpServletRequest request) {&#10;        log.error(&quot;Illegal argument: {}&quot;, ex.getMessage());&#10;&#10;        ErrorResponse error = new ErrorResponse(&#10;                HttpStatus.BAD_REQUEST.value(),&#10;                &quot;Bad Request&quot;,&#10;                ex.getMessage(),&#10;                request.getRequestURI()&#10;        );&#10;&#10;        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(error);&#10;    }&#10;&#10;    @ExceptionHandler(MethodArgumentNotValidException.class)&#10;    public ResponseEntity&lt;ErrorResponse&gt; handleValidationExceptions(&#10;            MethodArgumentNotValidException ex,&#10;            HttpServletRequest request) {&#10;        log.error(&quot;Validation error: {}&quot;, ex.getMessage());&#10;&#10;        List&lt;String&gt; errors = new ArrayList&lt;&gt;();&#10;        ex.getBindingResult().getAllErrors().forEach((error) -&gt; {&#10;            String fieldName = ((FieldError) error).getField();&#10;            String errorMessage = error.getDefaultMessage();&#10;            errors.add(fieldName + &quot;: &quot; + errorMessage);&#10;        });&#10;&#10;        ErrorResponse error = new ErrorResponse(&#10;                HttpStatus.BAD_REQUEST.value(),&#10;                &quot;Validation Failed&quot;,&#10;                &quot;Invalid input data&quot;,&#10;                errors,&#10;                request.getRequestURI()&#10;        );&#10;&#10;        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(error);&#10;    }&#10;&#10;    @ExceptionHandler(ConstraintViolationException.class)&#10;    public ResponseEntity&lt;ErrorResponse&gt; handleConstraintViolation(&#10;            ConstraintViolationException ex,&#10;            HttpServletRequest request) {&#10;        log.error(&quot;Constraint violation: {}&quot;, ex.getMessage());&#10;&#10;        List&lt;String&gt; errors = ex.getConstraintViolations()&#10;                .stream()&#10;                .map(ConstraintViolation::getMessage)&#10;                .collect(Collectors.toList());&#10;&#10;        ErrorResponse error = new ErrorResponse(&#10;                HttpStatus.BAD_REQUEST.value(),&#10;                &quot;Validation Failed&quot;,&#10;                &quot;Constraint violation&quot;,&#10;                errors,&#10;                request.getRequestURI()&#10;        );&#10;&#10;        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(error);&#10;    }&#10;&#10;    @ExceptionHandler(HttpMessageNotReadableException.class)&#10;    public ResponseEntity&lt;ErrorResponse&gt; handleHttpMessageNotReadable(&#10;            HttpMessageNotReadableException ex,&#10;            HttpServletRequest request) {&#10;        log.error(&quot;Malformed JSON request: {}&quot;, ex.getMessage());&#10;&#10;        ErrorResponse error = new ErrorResponse(&#10;                HttpStatus.BAD_REQUEST.value(),&#10;                &quot;Malformed JSON&quot;,&#10;                &quot;Request body is malformed or missing required fields&quot;,&#10;                request.getRequestURI()&#10;        );&#10;&#10;        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(error);&#10;    }&#10;&#10;    @ExceptionHandler(MethodArgumentTypeMismatchException.class)&#10;    public ResponseEntity&lt;ErrorResponse&gt; handleTypeMismatch(&#10;            MethodArgumentTypeMismatchException ex,&#10;            HttpServletRequest request) {&#10;        log.error(&quot;Type mismatch: {}&quot;, ex.getMessage());&#10;&#10;        String error = String.format(&quot;Parameter '%s' should be of type %s&quot;,&#10;                ex.getName(),&#10;                ex.getRequiredType() != null ? ex.getRequiredType().getSimpleName() : &quot;unknown&quot;);&#10;&#10;        ErrorResponse errorResponse = new ErrorResponse(&#10;                HttpStatus.BAD_REQUEST.value(),&#10;                &quot;Type Mismatch&quot;,&#10;                error,&#10;                request.getRequestURI()&#10;        );&#10;&#10;        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);&#10;    }&#10;&#10;    @ExceptionHandler(Exception.class)&#10;    public ResponseEntity&lt;ErrorResponse&gt; handleGlobalException(&#10;            Exception ex,&#10;            HttpServletRequest request) {&#10;        log.error(&quot;Unexpected error occurred&quot;, ex);&#10;&#10;        ErrorResponse error = new ErrorResponse(&#10;                HttpStatus.INTERNAL_SERVER_ERROR.value(),&#10;                &quot;Internal Server Error&quot;,&#10;                &quot;An unexpected error occurred. Please try again later.&quot;,&#10;                request.getRequestURI()&#10;        );&#10;&#10;        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(error);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/exceptions/InvalidRequestException.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/exceptions/InvalidRequestException.java" />
              <option name="updatedContent" value="package com.horrorcore.backendv1.exceptions;&#10;&#10;public class InvalidRequestException extends RuntimeException {&#10;    public InvalidRequestException(String message) {&#10;        super(message);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/exceptions/ResourceNotFoundException.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/exceptions/ResourceNotFoundException.java" />
              <option name="updatedContent" value="package com.horrorcore.backendv1.exceptions;&#10;&#10;public class ResourceNotFoundException extends RuntimeException {&#10;    public ResourceNotFoundException(String message) {&#10;        super(message);&#10;    }&#10;&#10;    public ResourceNotFoundException(String resourceName, String fieldName, Object fieldValue) {&#10;        super(String.format(&quot;%s not found with %s: '%s'&quot;, resourceName, fieldName, fieldValue));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/services/PlayerCharacterServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend-v1/src/main/java/com/horrorcore/backendv1/services/PlayerCharacterServiceImpl.java" />
              <option name="originalContent" value="package com.horrorcore.backendv1.services;&#10;&#10;import com.horrorcore.backendv1.dtos.PostNewCharacterRequest;&#10;import com.horrorcore.backendv1.dtos.UpdateCharacterRequest;&#10;import com.horrorcore.backendv1.entities.PlayerCharacter;&#10;import com.horrorcore.backendv1.entities.enums.PlayerClass;&#10;import com.horrorcore.backendv1.repositories.PlayerCharacterRepository;&#10;import org.springframework.context.annotation.Primary;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.List;&#10;&#10;@Service&#10;@Primary&#10;public class PlayerCharacterServiceImpl implements PlayerCharacterService {&#10;    private final PlayerCharacterRepository playerCharacterRepository;&#10;&#10;    public PlayerCharacterServiceImpl(PlayerCharacterRepository playerCharacterRepository) {&#10;        this.playerCharacterRepository = playerCharacterRepository;&#10;    }&#10;&#10;&#10;    @Override&#10;    public List&lt;PlayerCharacter&gt; getAllPlayerCharacters() {&#10;        return playerCharacterRepository.findAll();&#10;    }&#10;&#10;    @Override&#10;    public PlayerCharacter createPlayerCharacter(PostNewCharacterRequest request) {&#10;        PlayerCharacter newCharacter = new PlayerCharacter();&#10;        newCharacter.setName(request.name());&#10;        newCharacter.setPlayerClass(PlayerClass.valueOf(request.playerClass()));&#10;        newCharacter.setLevel(1);&#10;        newCharacter.setExperience(0);&#10;        switch (PlayerClass.valueOf(request.playerClass())) {&#10;            case WARRIOR -&gt; {&#10;                newCharacter.setHealth(150);&#10;                newCharacter.setMana(50);&#10;                newCharacter.setStrength(15);&#10;                newCharacter.setAgility(10);&#10;                newCharacter.setIntelligence(5);&#10;                newCharacter.setStamina(12);&#10;                newCharacter.setSpirit(8);&#10;            }&#10;            case MAGE -&gt; {&#10;                newCharacter.setHealth(100);&#10;                newCharacter.setMana(150);&#10;                newCharacter.setStrength(5);&#10;                newCharacter.setAgility(8);&#10;                newCharacter.setIntelligence(15);&#10;                newCharacter.setStamina(7);&#10;                newCharacter.setSpirit(12);&#10;            }&#10;            case ROGUE -&gt; {&#10;                newCharacter.setHealth(120);&#10;                newCharacter.setMana(80);&#10;                newCharacter.setStrength(10);&#10;                newCharacter.setAgility(15);&#10;                newCharacter.setIntelligence(8);&#10;                newCharacter.setStamina(10);&#10;                newCharacter.setSpirit(7);&#10;            }&#10;            case CLERIC -&gt; {&#10;                newCharacter.setHealth(110);&#10;                newCharacter.setMana(130);&#10;                newCharacter.setStrength(7);&#10;                newCharacter.setAgility(8);&#10;                newCharacter.setIntelligence(12);&#10;                newCharacter.setStamina(9);&#10;                newCharacter.setSpirit(15);&#10;            }&#10;            case RANGER -&gt; {&#10;                newCharacter.setHealth(130);&#10;                newCharacter.setMana(70);&#10;                newCharacter.setStrength(12);&#10;                newCharacter.setAgility(15);&#10;                newCharacter.setIntelligence(7);&#10;                newCharacter.setStamina(11);&#10;                newCharacter.setSpirit(8);&#10;            }&#10;            case INVENTOR -&gt; {&#10;                newCharacter.setHealth(115);&#10;                newCharacter.setMana(90);&#10;                newCharacter.setStrength(10);&#10;                newCharacter.setAgility(12);&#10;                newCharacter.setIntelligence(14);&#10;                newCharacter.setStamina(9);&#10;                newCharacter.setSpirit(5);&#10;            }&#10;            case ALCHEMIST -&gt; {&#10;                newCharacter.setHealth(105);&#10;                newCharacter.setMana(140);&#10;                newCharacter.setStrength(6);&#10;                newCharacter.setAgility(9);&#10;                newCharacter.setIntelligence(15);&#10;                newCharacter.setStamina(8);&#10;                newCharacter.setSpirit(12);&#10;&#10;            }&#10;            case BARD -&gt; {&#10;                newCharacter.setHealth(110);&#10;                newCharacter.setMana(120);&#10;                newCharacter.setStrength(8);&#10;                newCharacter.setAgility(12);&#10;                newCharacter.setIntelligence(10);&#10;                newCharacter.setStamina(9);&#10;                newCharacter.setSpirit(14);&#10;            }&#10;            case INQUISITOR -&gt; {&#10;                newCharacter.setHealth(125);&#10;                newCharacter.setMana(100);&#10;                newCharacter.setStrength(12);&#10;                newCharacter.setAgility(10);&#10;                newCharacter.setIntelligence(12);&#10;                newCharacter.setStamina(11);&#10;                newCharacter.setSpirit(10);&#10;            }&#10;            default -&gt; throw new IllegalArgumentException(&quot;Unknown player class: &quot; + request.playerClass());&#10;        }&#10;        return playerCharacterRepository.save(newCharacter);&#10;    }&#10;&#10;    @Override&#10;    public PlayerCharacter getPlayerCharacterById(String id) {&#10;        return playerCharacterRepository.findById(id).orElseThrow(()&#10;                -&gt; new IllegalArgumentException(&quot;Character not found with id: &quot; + id));&#10;    }&#10;&#10;    @Override&#10;    public PlayerCharacter updatePlayerCharacter(String id, UpdateCharacterRequest request) {&#10;        PlayerCharacter existingCharacter = playerCharacterRepository.findById(id).orElseThrow(()&#10;                -&gt; new IllegalArgumentException(&quot;Character not found with id: &quot; + id));&#10;        existingCharacter.setName(request.name());&#10;        existingCharacter.setPlayerClass(PlayerClass.valueOf(request.playerClass()));&#10;        existingCharacter.setLevel(request.level());&#10;        existingCharacter.setExperience(request.experiencePoints());&#10;        existingCharacter.setHealth(request.healthPoints());&#10;        existingCharacter.setMana(request.manaPoints());&#10;        existingCharacter.setStrength(request.strength());&#10;        existingCharacter.setAgility(request.agility());&#10;        existingCharacter.setIntelligence(request.intelligence());&#10;        existingCharacter.setStamina(request.stamina());&#10;        existingCharacter.setSpirit(request.spirit());&#10;        playerCharacterRepository.save(existingCharacter);&#10;        return existingCharacter;&#10;    }&#10;&#10;    @Override&#10;    public void deletePlayerCharacter(String id) {&#10;        if (!playerCharacterRepository.existsById(id)) {&#10;            throw new IllegalArgumentException(&quot;Character not found with id: &quot; + id);&#10;        }&#10;        playerCharacterRepository.deleteById(id);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.horrorcore.backendv1.services;&#13;&#10;&#13;&#10;import com.horrorcore.backendv1.dtos.PostNewCharacterRequest;&#13;&#10;import com.horrorcore.backendv1.dtos.UpdateCharacterRequest;&#13;&#10;import com.horrorcore.backendv1.entities.PlayerCharacter;&#13;&#10;import com.horrorcore.backendv1.entities.enums.PlayerClass;&#13;&#10;import com.horrorcore.backendv1.exceptions.InvalidRequestException;&#13;&#10;import com.horrorcore.backendv1.exceptions.PlayerCharacterNotFoundException;&#13;&#10;import com.horrorcore.backendv1.repositories.PlayerCharacterRepository;&#13;&#10;import org.springframework.context.annotation.Primary;&#13;&#10;import org.springframework.stereotype.Service;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;@Service&#13;&#10;@Primary&#13;&#10;public class PlayerCharacterServiceImpl implements PlayerCharacterService {&#13;&#10;    private final PlayerCharacterRepository playerCharacterRepository;&#13;&#10;&#13;&#10;    public PlayerCharacterServiceImpl(PlayerCharacterRepository playerCharacterRepository) {&#13;&#10;        this.playerCharacterRepository = playerCharacterRepository;&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public List&lt;PlayerCharacter&gt; getAllPlayerCharacters() {&#13;&#10;        return playerCharacterRepository.findAll();&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public PlayerCharacter createPlayerCharacter(PostNewCharacterRequest request) {&#13;&#10;        PlayerCharacter newCharacter = new PlayerCharacter();&#13;&#10;        newCharacter.setName(request.name());&#13;&#10;        newCharacter.setPlayerClass(PlayerClass.valueOf(request.playerClass()));&#13;&#10;        newCharacter.setLevel(1);&#13;&#10;        newCharacter.setExperience(0);&#13;&#10;        switch (PlayerClass.valueOf(request.playerClass())) {&#13;&#10;            case WARRIOR -&gt; {&#13;&#10;                newCharacter.setHealth(150);&#13;&#10;                newCharacter.setMana(50);&#13;&#10;                newCharacter.setStrength(15);&#13;&#10;                newCharacter.setAgility(10);&#13;&#10;                newCharacter.setIntelligence(5);&#13;&#10;                newCharacter.setStamina(12);&#13;&#10;                newCharacter.setSpirit(8);&#13;&#10;            }&#13;&#10;            case MAGE -&gt; {&#13;&#10;                newCharacter.setHealth(100);&#13;&#10;                newCharacter.setMana(150);&#13;&#10;                newCharacter.setStrength(5);&#13;&#10;                newCharacter.setAgility(8);&#13;&#10;                newCharacter.setIntelligence(15);&#13;&#10;                newCharacter.setStamina(7);&#13;&#10;                newCharacter.setSpirit(12);&#13;&#10;            }&#13;&#10;            case ROGUE -&gt; {&#13;&#10;                newCharacter.setHealth(120);&#13;&#10;                newCharacter.setMana(80);&#13;&#10;                newCharacter.setStrength(10);&#13;&#10;                newCharacter.setAgility(15);&#13;&#10;                newCharacter.setIntelligence(8);&#13;&#10;                newCharacter.setStamina(10);&#13;&#10;                newCharacter.setSpirit(7);&#13;&#10;            }&#13;&#10;            case CLERIC -&gt; {&#13;&#10;                newCharacter.setHealth(110);&#13;&#10;                newCharacter.setMana(130);&#13;&#10;                newCharacter.setStrength(7);&#13;&#10;                newCharacter.setAgility(8);&#13;&#10;                newCharacter.setIntelligence(12);&#13;&#10;                newCharacter.setStamina(9);&#13;&#10;                newCharacter.setSpirit(15);&#13;&#10;            }&#13;&#10;            case RANGER -&gt; {&#13;&#10;                newCharacter.setHealth(130);&#13;&#10;                newCharacter.setMana(70);&#13;&#10;                newCharacter.setStrength(12);&#13;&#10;                newCharacter.setAgility(15);&#13;&#10;                newCharacter.setIntelligence(7);&#13;&#10;                newCharacter.setStamina(11);&#13;&#10;                newCharacter.setSpirit(8);&#13;&#10;            }&#13;&#10;            case INVENTOR -&gt; {&#13;&#10;                newCharacter.setHealth(115);&#13;&#10;                newCharacter.setMana(90);&#13;&#10;                newCharacter.setStrength(10);&#13;&#10;                newCharacter.setAgility(12);&#13;&#10;                newCharacter.setIntelligence(14);&#13;&#10;                newCharacter.setStamina(9);&#13;&#10;                newCharacter.setSpirit(5);&#13;&#10;            }&#13;&#10;            case ALCHEMIST -&gt; {&#13;&#10;                newCharacter.setHealth(105);&#13;&#10;                newCharacter.setMana(140);&#13;&#10;                newCharacter.setStrength(6);&#13;&#10;                newCharacter.setAgility(9);&#13;&#10;                newCharacter.setIntelligence(15);&#13;&#10;                newCharacter.setStamina(8);&#13;&#10;                newCharacter.setSpirit(12);&#13;&#10;&#13;&#10;            }&#13;&#10;            case BARD -&gt; {&#13;&#10;                newCharacter.setHealth(110);&#13;&#10;                newCharacter.setMana(120);&#13;&#10;                newCharacter.setStrength(8);&#13;&#10;                newCharacter.setAgility(12);&#13;&#10;                newCharacter.setIntelligence(10);&#13;&#10;                newCharacter.setStamina(9);&#13;&#10;                newCharacter.setSpirit(14);&#13;&#10;            }&#13;&#10;            case INQUISITOR -&gt; {&#13;&#10;                newCharacter.setHealth(125);&#13;&#10;                newCharacter.setMana(100);&#13;&#10;                newCharacter.setStrength(12);&#13;&#10;                newCharacter.setAgility(10);&#13;&#10;                newCharacter.setIntelligence(12);&#13;&#10;                newCharacter.setStamina(11);&#13;&#10;                newCharacter.setSpirit(10);&#13;&#10;            }&#13;&#10;            default -&gt; throw new IllegalArgumentException(&quot;Unknown player class: &quot; + request.playerClass());&#13;&#10;        }&#13;&#10;        return playerCharacterRepository.save(newCharacter);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public PlayerCharacter getPlayerCharacterById(String id) {&#13;&#10;        return playerCharacterRepository.findById(id).orElseThrow(()&#13;&#10;                -&gt; new PlayerCharacterNotFoundException(&quot;Player Character with id: &quot; + id + &quot; not found&quot;));&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public PlayerCharacter updatePlayerCharacter(String id, UpdateCharacterRequest request) {&#13;&#10;        PlayerCharacter existingCharacter = playerCharacterRepository.findById(id).orElseThrow(()&#13;&#10;                -&gt; new PlayerCharacterNotFoundException(&quot;Player Character with id: &quot; + id + &quot; not found&quot;));&#13;&#10;        existingCharacter.setName(request.name());&#13;&#10;        existingCharacter.setPlayerClass(PlayerClass.valueOf(request.playerClass()));&#13;&#10;        existingCharacter.setLevel(request.level());&#13;&#10;        existingCharacter.setExperience(request.experiencePoints());&#13;&#10;        existingCharacter.setHealth(request.healthPoints());&#13;&#10;        existingCharacter.setMana(request.manaPoints());&#13;&#10;        existingCharacter.setStrength(request.strength());&#13;&#10;        existingCharacter.setAgility(request.agility());&#13;&#10;        existingCharacter.setIntelligence(request.intelligence());&#13;&#10;        existingCharacter.setStamina(request.stamina());&#13;&#10;        existingCharacter.setSpirit(request.spirit());&#13;&#10;        playerCharacterRepository.save(existingCharacter);&#13;&#10;        return existingCharacter;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Override&#13;&#10;    public void deletePlayerCharacter(String id) {&#13;&#10;        if (!playerCharacterRepository.existsById(id)) {&#13;&#10;            throw new PlayerCharacterNotFoundException(&quot;Player Character with id: &quot; + id + &quot; not found&quot;);&#13;&#10;        }&#13;&#10;        playerCharacterRepository.deleteById(id);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>